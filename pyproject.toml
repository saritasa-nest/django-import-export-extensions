[tool.poetry]
name = "django-import-export-extensions"
version = "0.4.2"
description = "Extend functionality of `django-import-export`"
authors = ["Saritasa <pypi@saritasa.com>"]
keywords = ["django_import_export_extensions"]
license = "MIT"
readme = "README.rst"
packages = [{include = "import_export_extensions"}]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.1",
    "Framework :: Django :: 4.2",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.dependencies]
python = ">=3.10, <3.12"
django-import-export = "^3.3.3"
celery = "^5.3.6"
redis = "^5.0.1"
django = ">=3.2"
djangorestframework = "^3.14.0"
drf-spectacular = "^0.26.5"
requests = "^2.31.0"
django-filter = "^23.4"
django-extensions = "^3.2.3"
django-picklefield = "^3.1"

[tool.poetry.group.dev.dependencies]
ipdb = "^0.13.13"
ipython = "^8.18.1"

[tool.poetry.group.linters.dependencies]
flake8-bugbear = "^23.11.28"
flake8-pytest-style = "^1.7.2"
flake8-broken-line = "^1.0.0"
flake8-docstrings = "^1.7.0"
flake8-django = "^1.4"
flake8-quotes = "^3.3.2"
flake8-pyproject = "^1.2.3"
flake8 = "^6.1.0"
mccabe = "^0.7.0"
mypy = "^1.7.1"
types-requests = "^2.31.0.10"

[tool.poetry.group.test.dependencies]
django-probes = "^1.7.0"
pytest-django = "^4.7.0"
pytest-mock = "^3.12.0"
factory-boy = "^3.3.0"
werkzeug = "^3.0.1"
coverage = "^7.3.2"
psycopg2-binary = "^2.9.9"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"
sphinx-rtd-theme = "^2.0.0"
watchdog = "^3.0.0"

[tool.poetry.group.local.dependencies]
toml = "^0.10.2"
pre-commit = "^3.5.0"
cruft = "^2.15.0"
saritasa-invocations = "^0.10.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
line_length = 79
multi_line_output = 3
known_django = "django"
known_drf = "rest_framework"
known_apps = "import_export_extensions"
skip = [
    "migrations",
    "_tmp,src",
    "scripts",
    ".venv",
    "node_modules",
    "config",
]
sections = [
    "FUTURE",
    "STDLIB",
    "DJANGO",
    "DRF",
    "THIRDPARTY",
    "FIRSTPARTY",
    "APPS",
    "LOCALFOLDER",
]
include_trailing_comma = true
default_section = "THIRDPARTY"

[tool.flake8]
ignore = [
    # https://www.flake8rules.com/rules/E126.html
    "E126",
    # https://www.flake8rules.com/rules/W503.html
    "W503",
    # https://www.flake8rules.com/rules/W504.html
    "W504",
    # https://github.com/m-burst/flake8-pytest-style/blob/master/docs/rules/PT004.md
    "PT004",
    # http://www.pydocstyle.org/en/latest/error_codes.html
    "D100",
    "D106",
    "D107",
    "D204",
    "D301",
]
extend-select = [
    "DJ10",  # Model should define verbose_name in Meta class
    "DJ11",  # Model should define verbose_name_plural in Meta class
]
statistics = true
count = true
max-complexity = 10
max-line-length = 100
pytest-fixture-no-parentheses = true
pytest-parametrize-names-type = "list"
pytest-parametrize-values-type = "list"
pytest-parametrize-values-row-type = "list"
inline-quotes = "double"
docstring-quotes = "double"
docstring-convention = "pep257"
exclude = [
    "migrations",
    ".venv",
    "__init__.py",
    "docs",
    "tests/settings.py",
]

[tool.mypy]
ignore_missing_imports = true
implicit_optional = false

warn_no_return = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
allow_redefinition = false
disallow_any_generics = true
strict_equality = true
strict_optional = true

ignore_errors = false
local_partial_types = true

enable_error_code = [
    "truthy-bool",
    "redundant-expr",
]

disable_error_code = [
    "attr-defined",
    "index",
    "annotation-unchecked",
]

exclude = [
    "settings.py",
    "docs/",
]

[[tool.mypy.overrides]]
module = "tests.*"
warn_unreachable = false

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py",
]

[tool.coverage.run]
source = [
    "import_export_extensions",
]
omit = [
    "import_export_extensions/migrations",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "def __repr__",
    "def __str__",
    "pass",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
